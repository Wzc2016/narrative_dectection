{"ast":null,"code":"'use strict';\n\nvar parseUrl = require('url').parse;\n\nvar DEFAULT_PORTS = {\n  'ftp:': 21,\n  'gopher:': 70,\n  'http:': 80,\n  'https:': 443,\n  'ws:': 80,\n  'wss:': 443\n};\n\nvar stringEndsWith = String.prototype.endsWith || function (s) {\n  return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;\n};\n/**\n * @param {string} url - The URL\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\n\n\nfunction getProxyForUrl(url) {\n  var parsedUrl = parseUrl(url);\n\n  if (!parsedUrl.host || !shouldProxy(parsedUrl)) {\n    return ''; // Don't proxy invalid URLs or URLs that match NO_PROXY.\n  }\n\n  var proto = url.split(':', 1)[0];\n  return getEnv(proto + '_proxy') || getEnv('all_proxy');\n}\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {object} parsedUrl - The result of url.parse\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\n\n\nfunction shouldProxy(parsedUrl) {\n  var NO_PROXY = getEnv('no_proxy').toLowerCase();\n\n  if (!NO_PROXY) {\n    return true; // Always proxy if NO_PROXY is not set.\n  }\n\n  if (NO_PROXY === '*') {\n    return false; // Never proxy if wildcard is set.\n  }\n\n  var port = parseInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || 0; // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n\n  var hostname = parsedUrl.host.replace(/:\\d*$/, '');\n  return NO_PROXY.split(/[,\\s]/).every(function (proxy) {\n    if (!proxy) {\n      return true; // Skip zero-length hosts.\n    }\n\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true; // Skip if ports don't match.\n    }\n\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    } // Stop proxying if the hostname ends with the no_proxy host.\n\n\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\n\n\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\n\nexports.getProxyForUrl = getProxyForUrl;","map":{"version":3,"sources":["/home/zecheng3/workspace/narrative_dectection/narrative_detection_frontend/node_modules/proxy-from-env/index.js"],"names":["parseUrl","require","parse","DEFAULT_PORTS","stringEndsWith","String","prototype","endsWith","s","length","indexOf","getProxyForUrl","url","parsedUrl","host","shouldProxy","proto","split","getEnv","NO_PROXY","toLowerCase","port","parseInt","protocol","hostname","replace","every","proxy","parsedProxy","match","parsedProxyHostname","parsedProxyPort","test","charAt","slice","call","key","process","env","toUpperCase","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar parseUrl = require('url').parse;\n\nvar DEFAULT_PORTS = {\n  'ftp:': 21,\n  'gopher:': 70,\n  'http:': 80,\n  'https:': 443,\n  'ws:': 80,\n  'wss:': 443,\n};\n\nvar stringEndsWith = String.prototype.endsWith || function(s) {\n  return s.length <= this.length &&\n    this.indexOf(s, this.length - s.length) !== -1;\n};\n\n/**\n * @param {string} url - The URL\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\nfunction getProxyForUrl(url) {\n  var parsedUrl = parseUrl(url);\n  if (!parsedUrl.host || !shouldProxy(parsedUrl)) {\n    return '';  // Don't proxy invalid URLs or URLs that match NO_PROXY.\n  }\n\n  var proto = url.split(':', 1)[0];\n  return getEnv(proto + '_proxy') || getEnv('all_proxy');\n}\n\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {object} parsedUrl - The result of url.parse\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\nfunction shouldProxy(parsedUrl) {\n  var NO_PROXY = getEnv('no_proxy').toLowerCase();\n  if (!NO_PROXY) {\n    return true;  // Always proxy if NO_PROXY is not set.\n  }\n  if (NO_PROXY === '*') {\n    return false;  // Never proxy if wildcard is set.\n  }\n\n  var port = parseInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || 0;\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n  var hostname = parsedUrl.host.replace(/:\\d*$/, '');\n\n  return NO_PROXY.split(/[,\\s]/).every(function(proxy) {\n    if (!proxy) {\n      return true;  // Skip zero-length hosts.\n    }\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true;  // Skip if ports don't match.\n    }\n\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    }\n    // Stop proxying if the hostname ends with the no_proxy host.\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\n\nexports.getProxyForUrl = getProxyForUrl;\n"]},"metadata":{},"sourceType":"script"}