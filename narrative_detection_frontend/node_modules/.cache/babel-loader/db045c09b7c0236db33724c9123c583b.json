{"ast":null,"code":"var common = exports,\n    url = require('url'),\n    extend = require('util')._extend,\n    required = require('requires-port');\n\nvar upgradeHeader = /(^|,)\\s*upgrade\\s*($|,)/i,\n    isSSL = /^https|wss/;\n/**\n * Simple Regex for testing if protocol is https\n */\n\ncommon.isSSL = isSSL;\n/**\n * Copies the right headers from `options` and `req` to\n * `outgoing` which is then used to fire the proxied\n * request.\n *\n * Examples:\n *\n *    common.setupOutgoing(outgoing, options, req)\n *    // => { host: ..., hostname: ...}\n *\n * @param {Object} Outgoing Base object to be filled with required properties\n * @param {Object} Options Config object passed to the proxy\n * @param {ClientRequest} Req Request Object\n * @param {String} Forward String to select forward or target\n * \n * @return {Object} Outgoing Object with all required properties set\n *\n * @api private\n */\n\ncommon.setupOutgoing = function (outgoing, options, req, forward) {\n  outgoing.port = options[forward || 'target'].port || (isSSL.test(options[forward || 'target'].protocol) ? 443 : 80);\n  ['host', 'hostname', 'socketPath', 'pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', 'secureProtocol'].forEach(function (e) {\n    outgoing[e] = options[forward || 'target'][e];\n  });\n  outgoing.method = req.method;\n  outgoing.headers = extend({}, req.headers);\n\n  if (options.headers) {\n    extend(outgoing.headers, options.headers);\n  }\n\n  if (options.auth) {\n    outgoing.auth = options.auth;\n  }\n\n  if (isSSL.test(options[forward || 'target'].protocol)) {\n    outgoing.rejectUnauthorized = typeof options.secure === \"undefined\" ? true : options.secure;\n  }\n\n  outgoing.agent = options.agent || false;\n  outgoing.localAddress = options.localAddress; //\n  // Remark: If we are false and not upgrading, set the connection: close. This is the right thing to do\n  // as node core doesn't handle this COMPLETELY properly yet.\n  //\n\n  if (!outgoing.agent) {\n    outgoing.headers = outgoing.headers || {};\n\n    if (typeof outgoing.headers.connection !== 'string' || !upgradeHeader.test(outgoing.headers.connection)) {\n      outgoing.headers.connection = 'close';\n    }\n  } // the final path is target path + relative path requested by user:\n\n\n  var target = options[forward || 'target'];\n  var targetPath = target && options.prependPath !== false ? target.path || '' : ''; //\n  // Remark: Can we somehow not use url.parse as a perf optimization?\n  //\n\n  var outgoingPath = !options.toProxy ? url.parse(req.url).path || '/' : req.url; //\n  // Remark: ignorePath will just straight up ignore whatever the request's\n  // path is. This can be labeled as FOOT-GUN material if you do not know what\n  // you are doing and are using conflicting options.\n  //\n\n  outgoingPath = !options.ignorePath ? outgoingPath : '/';\n  outgoing.path = common.urlJoin(targetPath, outgoingPath);\n\n  if (options.changeOrigin) {\n    outgoing.headers.host = required(outgoing.port, options[forward || 'target'].protocol) && !hasPort(outgoing.host) ? outgoing.host + ':' + outgoing.port : outgoing.host;\n  }\n\n  return outgoing;\n};\n/**\n * Set the proper configuration for sockets,\n * set no delay and set keep alive, also set\n * the timeout to 0.\n *\n * Examples:\n *\n *    common.setupSocket(socket)\n *    // => Socket\n *\n * @param {Socket} Socket instance to setup\n * \n * @return {Socket} Return the configured socket.\n *\n * @api private\n */\n\n\ncommon.setupSocket = function (socket) {\n  socket.setTimeout(0);\n  socket.setNoDelay(true);\n  socket.setKeepAlive(true, 0);\n  return socket;\n};\n/**\n * Get the port number from the host. Or guess it based on the connection type.\n *\n * @param {Request} req Incoming HTTP request.\n *\n * @return {String} The port number.\n *\n * @api private\n */\n\n\ncommon.getPort = function (req) {\n  var res = req.headers.host ? req.headers.host.match(/:(\\d+)/) : '';\n  return res ? res[1] : common.hasEncryptedConnection(req) ? '443' : '80';\n};\n/**\n * Check if the request has an encrypted connection.\n *\n * @param {Request} req Incoming HTTP request.\n *\n * @return {Boolean} Whether the connection is encrypted or not.\n *\n * @api private\n */\n\n\ncommon.hasEncryptedConnection = function (req) {\n  return Boolean(req.connection.encrypted || req.connection.pair);\n};\n/**\n * OS-agnostic join (doesn't break on URLs like path.join does on Windows)>\n *\n * @return {String} The generated path.\n *\n * @api private\n */\n\n\ncommon.urlJoin = function () {\n  //\n  // We do not want to mess with the query string. All we want to touch is the path.\n  //\n  var args = Array.prototype.slice.call(arguments),\n      lastIndex = args.length - 1,\n      last = args[lastIndex],\n      lastSegs = last.split('?'),\n      retSegs;\n  args[lastIndex] = lastSegs.shift(); //\n  // Join all strings, but remove empty strings so we don't get extra slashes from\n  // joining e.g. ['', 'am']\n  //\n\n  retSegs = [args.filter(Boolean).join('/').replace(/\\/+/g, '/').replace(/:\\//g, '://')]; // Only join the query string if it exists so we don't have trailing a '?'\n  // on every request\n  // Handle case where there could be multiple ? in the URL.\n\n  retSegs.push.apply(retSegs, lastSegs);\n  return retSegs.join('?');\n};\n/**\n * Check the host and see if it potentially has a port in it (keep it simple)\n *\n * @returns {Boolean} Whether we have one or not\n *\n * @api private\n */\n\n\nfunction hasPort(host) {\n  return !!~host.indexOf(':');\n}\n\n;","map":{"version":3,"sources":["/home/zecheng3/workspace/narrative_dectection/narrative_detection_frontend/node_modules/cors-anywhere/node_modules/http-proxy/lib/http-proxy/common.js"],"names":["common","exports","url","require","extend","_extend","required","upgradeHeader","isSSL","setupOutgoing","outgoing","options","req","forward","port","test","protocol","forEach","e","method","headers","auth","rejectUnauthorized","secure","agent","localAddress","connection","target","targetPath","prependPath","path","outgoingPath","toProxy","parse","ignorePath","urlJoin","changeOrigin","host","hasPort","setupSocket","socket","setTimeout","setNoDelay","setKeepAlive","getPort","res","match","hasEncryptedConnection","Boolean","encrypted","pair","args","Array","prototype","slice","call","arguments","lastIndex","length","last","lastSegs","split","retSegs","shift","filter","join","replace","push","apply","indexOf"],"mappings":"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","sourcesContent":["var common   = exports,\n    url      = require('url'),\n    extend   = require('util')._extend,\n    required = require('requires-port');\n\nvar upgradeHeader = /(^|,)\\s*upgrade\\s*($|,)/i,\n    isSSL = /^https|wss/;\n\n/**\n * Simple Regex for testing if protocol is https\n */\ncommon.isSSL = isSSL;\n/**\n * Copies the right headers from `options` and `req` to\n * `outgoing` which is then used to fire the proxied\n * request.\n *\n * Examples:\n *\n *    common.setupOutgoing(outgoing, options, req)\n *    // => { host: ..., hostname: ...}\n *\n * @param {Object} Outgoing Base object to be filled with required properties\n * @param {Object} Options Config object passed to the proxy\n * @param {ClientRequest} Req Request Object\n * @param {String} Forward String to select forward or target\n * \n * @return {Object} Outgoing Object with all required properties set\n *\n * @api private\n */\n\ncommon.setupOutgoing = function(outgoing, options, req, forward) {\n  outgoing.port = options[forward || 'target'].port ||\n                  (isSSL.test(options[forward || 'target'].protocol) ? 443 : 80);\n\n  ['host', 'hostname', 'socketPath', 'pfx', 'key',\n    'passphrase', 'cert', 'ca', 'ciphers', 'secureProtocol'].forEach(\n    function(e) { outgoing[e] = options[forward || 'target'][e]; }\n  );\n\n  outgoing.method = req.method;\n  outgoing.headers = extend({}, req.headers);\n\n  if (options.headers){\n    extend(outgoing.headers, options.headers);\n  }\n\n  if (options.auth) {\n    outgoing.auth = options.auth;\n  }\n\n  if (isSSL.test(options[forward || 'target'].protocol)) {\n    outgoing.rejectUnauthorized = (typeof options.secure === \"undefined\") ? true : options.secure;\n  }\n\n\n  outgoing.agent = options.agent || false;\n  outgoing.localAddress = options.localAddress;\n\n  //\n  // Remark: If we are false and not upgrading, set the connection: close. This is the right thing to do\n  // as node core doesn't handle this COMPLETELY properly yet.\n  //\n  if (!outgoing.agent) {\n    outgoing.headers = outgoing.headers || {};\n    if (typeof outgoing.headers.connection !== 'string'\n        || !upgradeHeader.test(outgoing.headers.connection)\n       ) { outgoing.headers.connection = 'close'; }\n  }\n\n\n  // the final path is target path + relative path requested by user:\n  var target = options[forward || 'target'];\n  var targetPath = target && options.prependPath !== false\n    ? (target.path || '')\n    : '';\n\n  //\n  // Remark: Can we somehow not use url.parse as a perf optimization?\n  //\n  var outgoingPath = !options.toProxy\n    ? (url.parse(req.url).path || '/')\n    : req.url;\n\n  //\n  // Remark: ignorePath will just straight up ignore whatever the request's\n  // path is. This can be labeled as FOOT-GUN material if you do not know what\n  // you are doing and are using conflicting options.\n  //\n  outgoingPath = !options.ignorePath ? outgoingPath : '/';\n\n  outgoing.path = common.urlJoin(targetPath, outgoingPath);\n\n  if (options.changeOrigin) {\n    outgoing.headers.host =\n      required(outgoing.port, options[forward || 'target'].protocol) && !hasPort(outgoing.host)\n        ? outgoing.host + ':' + outgoing.port\n        : outgoing.host;\n  }\n  return outgoing;\n};\n\n/**\n * Set the proper configuration for sockets,\n * set no delay and set keep alive, also set\n * the timeout to 0.\n *\n * Examples:\n *\n *    common.setupSocket(socket)\n *    // => Socket\n *\n * @param {Socket} Socket instance to setup\n * \n * @return {Socket} Return the configured socket.\n *\n * @api private\n */\n\ncommon.setupSocket = function(socket) {\n  socket.setTimeout(0);\n  socket.setNoDelay(true);\n\n  socket.setKeepAlive(true, 0);\n\n  return socket;\n};\n\n/**\n * Get the port number from the host. Or guess it based on the connection type.\n *\n * @param {Request} req Incoming HTTP request.\n *\n * @return {String} The port number.\n *\n * @api private\n */\ncommon.getPort = function(req) {\n  var res = req.headers.host ? req.headers.host.match(/:(\\d+)/) : '';\n\n  return res ?\n    res[1] :\n    common.hasEncryptedConnection(req) ? '443' : '80';\n};\n\n/**\n * Check if the request has an encrypted connection.\n *\n * @param {Request} req Incoming HTTP request.\n *\n * @return {Boolean} Whether the connection is encrypted or not.\n *\n * @api private\n */\ncommon.hasEncryptedConnection = function(req) {\n  return Boolean(req.connection.encrypted || req.connection.pair);\n};\n\n/**\n * OS-agnostic join (doesn't break on URLs like path.join does on Windows)>\n *\n * @return {String} The generated path.\n *\n * @api private\n */\n\ncommon.urlJoin = function() {\n    //\n    // We do not want to mess with the query string. All we want to touch is the path.\n    //\n  var args = Array.prototype.slice.call(arguments),\n      lastIndex = args.length - 1,\n      last = args[lastIndex],\n      lastSegs = last.split('?'),\n      retSegs;\n\n  args[lastIndex] = lastSegs.shift();\n\n  //\n  // Join all strings, but remove empty strings so we don't get extra slashes from\n  // joining e.g. ['', 'am']\n  //\n  retSegs = [\n    args.filter(Boolean).join('/').replace(/\\/+/g, '/').replace(/:\\//g, '://')\n  ];\n\n  // Only join the query string if it exists so we don't have trailing a '?'\n  // on every request\n\n  // Handle case where there could be multiple ? in the URL.\n  retSegs.push.apply(retSegs, lastSegs);\n\n  return retSegs.join('?')\n};\n\n/**\n * Check the host and see if it potentially has a port in it (keep it simple)\n *\n * @returns {Boolean} Whether we have one or not\n *\n * @api private\n */\nfunction hasPort(host) {\n  return !!~host.indexOf(':');\n};\n"]},"metadata":{},"sourceType":"script"}