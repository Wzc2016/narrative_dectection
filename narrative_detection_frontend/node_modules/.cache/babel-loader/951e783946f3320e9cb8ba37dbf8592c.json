{"ast":null,"code":"var _jsxFileName = \"/home/zecheng3/workspace/narrative_dectection/narrative_detection_frontend/src/App.js\";\nimport React from \"react\";\nimport Sidebar from \"react-sidebar\";\nimport { Container, Row, Col } from 'reactstrap';\nimport { ResponsiveLine } from '@nivo/line';\nimport { ResponsiveBar } from '@nivo/bar';\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { pie_data, line_data, line_pos_neg, activity_pie_data } from \"./data\";\nimport './App.css';\nimport GaugeChart from 'react-gauge-chart';\nimport Thermometer from 'react-thermometer-component';\nvar API = 'http://127.0.0.1:8000/polar_result/';\nvar date = 'Feb_01_2020';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeTitle = title => {\n      this.setState({\n        currentTopic: title,\n        sidebarOpen: false\n      });\n    };\n\n    this.changeColor = number => {\n      this.setState({\n        selected: number\n      });\n    };\n\n    this.myColor = position => {\n      if (this.state.selected === position) {\n        return \"grey\";\n      }\n\n      return \"\";\n    };\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      sidebarOpen: true,\n      selected: 0,\n      currentTopic: \"ACFT\",\n      items: []\n    };\n    this.onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(API + this.state.currentTopic + '/' + date).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result\n      });\n      console.log(result);\n    });\n  }\n\n  onSetSidebarOpen(open) {\n    this.setState({\n      sidebarOpen: open\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      items\n    } = this.state;\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(Sidebar, {\n        sidebar: React.createElement(\"div\", {\n          styles: {\n            height: '500px',\n            width: '500px',\n            overflowY: 'scroll',\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          style: {\n            background: this.myColor(0)\n          },\n          onClick: () => this.changeTitle(\"ACFT\"),\n          onMouseEnter: () => this.changeColor(0),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, \"ACTF\")), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          style: {\n            background: this.myColor(1)\n          },\n          onClick: () => this.changeTitle(\"Coronavirus\"),\n          onMouseEnter: () => this.changeColor(1),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, \"Coronavirus\")), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          style: {\n            background: this.myColor(2)\n          },\n          onClick: () => this.changeTitle(\"Housing\"),\n          onMouseEnter: () => this.changeColor(2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, \"Housing\")), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          style: {\n            background: this.myColor(3)\n          },\n          onClick: () => this.changeTitle(\"Recruiting\"),\n          onMouseEnter: () => this.changeColor(3),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, \"Recruiting\"))),\n        open: this.state.sidebarOpen,\n        onSetOpen: this.onSetSidebarOpen,\n        styles: {\n          sidebar: {\n            background: \"white\"\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.state.currentTopic), React.createElement(\"button\", {\n        onClick: () => this.onSetSidebarOpen(true),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Select topic\"), React.createElement(\"div\", {\n        className: \"charts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(GaugeChart, {\n        id: \"gauge-chart1\",\n        nrOfLevels: 2,\n        animate: false,\n        percent: (2 * this.state.items.positive + 1 * this.state.items.neutral) / (2 * (this.state.items.positive + this.state.items.neutral + this.state.items.negative)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(GaugeChart, {\n        id: \"gauge-chart2\",\n        nrOfLevels: 1,\n        animate: false,\n        percent: 0.8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"temperature\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Thermometer, {\n        theme: \"light\",\n        value: \"18\",\n        max: \"100\",\n        size: \"normal\",\n        height: \"150\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }))));\n    }\n  }\n\n} // function linechart(data) {\n//     return (\n//         <ResponsiveLine\n//             data={data}\n//             curve=\"natural\"\n//             // width={1000}\n//             // height={500}\n//             axisTop={null}\n//             axisRight={null}\n//             axisBottom={{\n//                 orient: 'bottom',\n//                 tickSize: 10,\n//                 tickPadding: 5,\n//                 tickRotation: 0,\n//                 legend: 'Date',\n//                 legendOffset: 36,\n//                 legendPosition: 'middle',\n//                 format: \"%b %d\"\n//             }}\n//             axisLeft={{\n//                 orient: 'left',\n//                 tickSize: 10,\n//                 tickPadding: 5,\n//                 tickRotation: 0,\n//                 legend: 'activity count',\n//                 legendOffset: -40,\n//                 legendPosition: 'middle'\n//             }}\n//             margin={{\n//                 top: 50,\n//                 right: 50,\n//                 bottom: 50,\n//                 left: 50\n//             }}\n//             yScale={{\n//                 type: \"linear\",\n//                 stacked: false,\n//                 min: 0,\n//                 max: \"auto\"\n//             }}\n//             xScale={{\n//                 type: \"time\",\n//                 precision: \"day\",\n//                 format: \"native\"\n//             }}\n//             legends={[\n//                 {\n//                     anchor: 'bottom-right',\n//                     direction: 'column',\n//                     justify: false,\n//                     translateX: 0,\n//                     translateY: 0,\n//                     itemsSpacing: 0,\n//                     itemDirection: 'left-to-right',\n//                     itemWidth: 80,\n//                     itemHeight: 20,\n//                     itemOpacity: 0.75,\n//                     symbolSize: 12,\n//                     symbolShape: 'circle',\n//                     symbolBorderColor: 'rgba(0, 0, 0, .5)',\n//                     effects: [\n//                         {\n//                             on: 'hover',\n//                             style: {\n//                                 itemBackground: 'rgba(0, 0, 0, .03)',\n//                                 itemOpacity: 1\n//                             }\n//                         }\n//                     ]\n//                 }\n//             ]}\n//         />\n//     );\n// }\n// function piechart(data) {\n//     return (\n//         <ResponsivePieCanvas\n//             data={data}\n//             margin={{ top: 40, right: 200, bottom: 40, left: 80 }}\n//             pixelRatio={2}\n//             innerRadius={0.5}\n//             padAngle={0.7}\n//             cornerRadius={3}\n//             colors={{ scheme: 'paired' }}\n//             width={800}\n//             height={800}\n//             borderColor={{ from: 'color', modifiers: [ [ 'darker', 0.6 ] ] }}\n//             radialLabelsSkipAngle={10}\n//             radialLabelsTextXOffset={6}\n//             radialLabelsTextColor=\"#333333\"\n//             radialLabelsLinkOffset={0}\n//             radialLabelsLinkDiagonalLength={16}\n//             radialLabelsLinkHorizontalLength={24}\n//             radialLabelsLinkStrokeWidth={1}\n//             radialLabelsLinkColor={{ from: 'color' }}\n//             slicesLabelsSkipAngle={10}\n//             slicesLabelsTextColor=\"#333333\"\n//             animate={true}\n//             motionStiffness={90}\n//             motionDamping={15}\n//             legends={[\n//                 {\n//                     anchor: 'right',\n//                     direction: 'column',\n//                     translateX: 140,\n//                     itemWidth: 60,\n//                     itemHeight: 14,\n//                     itemsSpacing: 2,\n//                     symbolSize: 14,\n//                     symbolShape: 'circle'\n//                 }\n//             ]}\n//         />\n//     )\n// }\n// // const styles = StyleSheet.create({\n// //\n// // });\n\n\nexport default App;","map":{"version":3,"sources":["/home/zecheng3/workspace/narrative_dectection/narrative_detection_frontend/src/App.js"],"names":["React","Sidebar","Container","Row","Col","ResponsiveLine","ResponsiveBar","ResponsivePieCanvas","pie_data","line_data","line_pos_neg","activity_pie_data","GaugeChart","Thermometer","API","date","App","Component","constructor","props","changeTitle","title","setState","currentTopic","sidebarOpen","changeColor","number","selected","myColor","position","state","error","isLoaded","items","onSetSidebarOpen","bind","componentDidMount","fetch","then","res","json","result","console","log","open","render","message","height","width","overflowY","flexDirection","background","sidebar","positive","neutral","negative"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Sidebar from \"react-sidebar\";\nimport { Container, Row, Col } from 'reactstrap';\nimport { ResponsiveLine } from '@nivo/line'\nimport { ResponsiveBar } from '@nivo/bar'\nimport { ResponsivePieCanvas } from '@nivo/pie'\nimport {pie_data, line_data, line_pos_neg,activity_pie_data} from \"./data\";\nimport './App.css'\nimport GaugeChart from 'react-gauge-chart'\nimport Thermometer from 'react-thermometer-component'\n\nvar API = 'http://127.0.0.1:8000/polar_result/';\nvar date = 'Feb_01_2020';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    \terror: null,\n    \tisLoaded: false,\n    \tsidebarOpen: true,\n        selected: 0,\n    \tcurrentTopic:\"ACFT\",\n    \titems: [],\n    };\n    this.onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\n  }\n\n  componentDidMount() {\n  \tfetch(API + this.state.currentTopic + '/' + date)\n  \t.then(res => res.json())\n  \t.then(\n  \t\t(result) => {\n  \t\t\tthis.setState({\n  \t\t\t\tisLoaded: true,\n  \t\t\t\titems: result\n  \t\t\t})\n  \t\t\tconsole.log(result);\n  \t\t}\n\n  \t\t);\n  }\n  onSetSidebarOpen(open) {\n    this.setState({ sidebarOpen: open });\n  }\n\n    changeTitle = (title) => {\n        this.setState(\n            { currentTopic: title,\n                sidebarOpen: false }\n            );\n    }\n\n    changeColor = (number) => {\n        this.setState(\n            { selected: number}\n        );\n    }\n\n    myColor =(position) => {\n        if (this.state.selected === position) {\n            return \"grey\";\n        }\n        return \"\";\n    }\n\n  render() {\n  \tconst { error, isLoaded, items} = this.state;\n  \t if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n\t    return (\n\t        <Sidebar\n\t            sidebar={\n\t              <div styles={{ height: '500px', width:'500px', overflowY: 'scroll', flexDirection: 'column' }} >\n\t              <Row>\n\t              <h2 style={{background: this.myColor(0)}} onClick={() => this.changeTitle(\"ACFT\")} onMouseEnter={() => this.changeColor(0)}>\n\t                ACTF\n\t              </h2>\n\t              </Row>\n\t              <Row>\n\t              <h2 style={{background: this.myColor(1)}} onClick={() => this.changeTitle(\"Coronavirus\")} onMouseEnter={() => this.changeColor(1)}>\n\t                Coronavirus\n\t              </h2>\n\t              </Row>\n\t              <Row>\n\t              <h2 style={{background: this.myColor(2)}} onClick={() => this.changeTitle(\"Housing\")} onMouseEnter={() => this.changeColor(2)}>\n\t                Housing\n\t              </h2>\n\t              </Row>\n\t              <Row>\n\t              <h2 style={{background: this.myColor(3)}} onClick={() => this.changeTitle(\"Recruiting\")} onMouseEnter={() => this.changeColor(3)}>\n\t                Recruiting\n\t              </h2>\n\t              </Row>\n\t              </div>\n\t            }\n\t            open={this.state.sidebarOpen}\n\t            onSetOpen={this.onSetSidebarOpen}\n\t            styles={{ sidebar: { background: \"white\" } }}\n\t        >\n\t            <h1>\n\t                {this.state.currentTopic}\n\t            </h1>\n\t            <button onClick={() => this.onSetSidebarOpen(true)}>\n\t                Select topic\n\t            </button>\n\t            <div className='charts'>\n\t\t            <GaugeChart id=\"gauge-chart1\" \n\t\t              nrOfLevels={2} \n\t\t              animate={false}\n\t\t              percent={(2 * this.state.items.positive + 1 * this.state.items.neutral)/(2 * (this.state.items.positive + this.state.items.neutral + this.state.items.negative))}\n\t\t            />\n\t\t            <GaugeChart id=\"gauge-chart2\" \n\t\t              nrOfLevels={1} \n\t\t              animate={false}\n\t\t              percent={0.8}\n\t\t            />\n\t\t            <div className='temperature'>\n\t\t\t            <Thermometer\n\t\t\t\t\t\t  theme=\"light\"\n\t\t\t\t\t\t  value=\"18\"\n\t\t\t\t\t\t  max=\"100\"\n\t\t\t\t\t\t  size=\"normal\"\n\t\t\t\t\t\t  height=\"150\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t            </div>\n\t        </Sidebar>\n\t    );\n\t  }\n\t}\n}\n\n// function linechart(data) {\n//     return (\n//         <ResponsiveLine\n//             data={data}\n//             curve=\"natural\"\n//             // width={1000}\n//             // height={500}\n//             axisTop={null}\n//             axisRight={null}\n//             axisBottom={{\n//                 orient: 'bottom',\n//                 tickSize: 10,\n//                 tickPadding: 5,\n//                 tickRotation: 0,\n//                 legend: 'Date',\n//                 legendOffset: 36,\n//                 legendPosition: 'middle',\n//                 format: \"%b %d\"\n//             }}\n//             axisLeft={{\n//                 orient: 'left',\n//                 tickSize: 10,\n//                 tickPadding: 5,\n//                 tickRotation: 0,\n//                 legend: 'activity count',\n//                 legendOffset: -40,\n//                 legendPosition: 'middle'\n//             }}\n//             margin={{\n//                 top: 50,\n//                 right: 50,\n//                 bottom: 50,\n//                 left: 50\n//             }}\n//             yScale={{\n//                 type: \"linear\",\n//                 stacked: false,\n//                 min: 0,\n//                 max: \"auto\"\n//             }}\n//             xScale={{\n//                 type: \"time\",\n//                 precision: \"day\",\n//                 format: \"native\"\n//             }}\n//             legends={[\n//                 {\n//                     anchor: 'bottom-right',\n//                     direction: 'column',\n//                     justify: false,\n//                     translateX: 0,\n//                     translateY: 0,\n//                     itemsSpacing: 0,\n//                     itemDirection: 'left-to-right',\n//                     itemWidth: 80,\n//                     itemHeight: 20,\n//                     itemOpacity: 0.75,\n//                     symbolSize: 12,\n//                     symbolShape: 'circle',\n//                     symbolBorderColor: 'rgba(0, 0, 0, .5)',\n//                     effects: [\n//                         {\n//                             on: 'hover',\n//                             style: {\n//                                 itemBackground: 'rgba(0, 0, 0, .03)',\n//                                 itemOpacity: 1\n//                             }\n//                         }\n//                     ]\n//                 }\n//             ]}\n//         />\n//     );\n// }\n\n// function piechart(data) {\n//     return (\n//         <ResponsivePieCanvas\n//             data={data}\n//             margin={{ top: 40, right: 200, bottom: 40, left: 80 }}\n//             pixelRatio={2}\n//             innerRadius={0.5}\n//             padAngle={0.7}\n//             cornerRadius={3}\n//             colors={{ scheme: 'paired' }}\n//             width={800}\n//             height={800}\n//             borderColor={{ from: 'color', modifiers: [ [ 'darker', 0.6 ] ] }}\n//             radialLabelsSkipAngle={10}\n//             radialLabelsTextXOffset={6}\n//             radialLabelsTextColor=\"#333333\"\n//             radialLabelsLinkOffset={0}\n//             radialLabelsLinkDiagonalLength={16}\n//             radialLabelsLinkHorizontalLength={24}\n//             radialLabelsLinkStrokeWidth={1}\n//             radialLabelsLinkColor={{ from: 'color' }}\n//             slicesLabelsSkipAngle={10}\n//             slicesLabelsTextColor=\"#333333\"\n//             animate={true}\n//             motionStiffness={90}\n//             motionDamping={15}\n//             legends={[\n//                 {\n//                     anchor: 'right',\n//                     direction: 'column',\n//                     translateX: 140,\n//                     itemWidth: 60,\n//                     itemHeight: 14,\n//                     itemsSpacing: 2,\n//                     symbolSize: 14,\n//                     symbolShape: 'circle'\n//                 }\n//             ]}\n//         />\n//     )\n// }\n// // const styles = StyleSheet.create({\n// //\n// // });\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}