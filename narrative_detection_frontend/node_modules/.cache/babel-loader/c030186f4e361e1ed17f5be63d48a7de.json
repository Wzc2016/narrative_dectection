{"ast":null,"code":"// Â© 2013 - 2016 Rob Wu <rob@robwu.nl>\n// Released under the MIT license\n'use strict';\n\nvar httpProxy = require('http-proxy');\n\nvar net = require('net');\n\nvar url = require('url');\n\nvar regexp_tld = require('./regexp-top-level-domain');\n\nvar getProxyForUrl = require('proxy-from-env').getProxyForUrl;\n\nvar help_text = {};\n\nfunction showUsage(help_file, headers, response) {\n  var isHtml = /\\.html$/.test(help_file);\n  headers['content-type'] = isHtml ? 'text/html' : 'text/plain';\n\n  if (help_text[help_file] != null) {\n    response.writeHead(200, headers);\n    response.end(help_text[help_file]);\n  } else {\n    require('fs').readFile(help_file, 'utf8', function (err, data) {\n      if (err) {\n        console.error(err);\n        response.writeHead(500, headers);\n        response.end();\n      } else {\n        help_text[help_file] = data;\n        showUsage(help_file, headers, response); // Recursive call, but since data is a string, the recursion will end\n      }\n    });\n  }\n}\n/**\n * Check whether the specified hostname is valid.\n *\n * @param hostname {string} Host name (excluding port) of requested resource.\n * @return {boolean} Whether the requested resource can be accessed.\n */\n\n\nfunction isValidHostName(hostname) {\n  return !!(regexp_tld.test(hostname) || net.isIPv4(hostname) || net.isIPv6(hostname));\n}\n/**\n * Adds CORS headers to the response headers.\n *\n * @param headers {object} Response headers\n * @param request {ServerRequest}\n */\n\n\nfunction withCORS(headers, request) {\n  headers['access-control-allow-origin'] = '*';\n  var corsMaxAge = request.corsAnywhereRequestState.corsMaxAge;\n\n  if (corsMaxAge) {\n    headers['access-control-max-age'] = corsMaxAge;\n  }\n\n  if (request.headers['access-control-request-method']) {\n    headers['access-control-allow-methods'] = request.headers['access-control-request-method'];\n    delete request.headers['access-control-request-method'];\n  }\n\n  if (request.headers['access-control-request-headers']) {\n    headers['access-control-allow-headers'] = request.headers['access-control-request-headers'];\n    delete request.headers['access-control-request-headers'];\n  }\n\n  headers['access-control-expose-headers'] = Object.keys(headers).join(',');\n  return headers;\n}\n/**\n * Performs the actual proxy request.\n *\n * @param req {ServerRequest} Incoming http request\n * @param res {ServerResponse} Outgoing (proxied) http request\n * @param proxy {HttpProxy}\n */\n\n\nfunction proxyRequest(req, res, proxy) {\n  var location = req.corsAnywhereRequestState.location;\n  req.url = location.path;\n  var proxyOptions = {\n    changeOrigin: false,\n    prependPath: false,\n    target: location,\n    headers: {\n      host: location.host\n    },\n    // HACK: Get hold of the proxyReq object, because we need it later.\n    // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L144\n    buffer: {\n      pipe: function (proxyReq) {\n        var proxyReqOn = proxyReq.on; // Intercepts the handler that connects proxyRes to res.\n        // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L146-L158\n\n        proxyReq.on = function (eventName, listener) {\n          if (eventName !== 'response') {\n            return proxyReqOn.call(this, eventName, listener);\n          }\n\n          return proxyReqOn.call(this, 'response', function (proxyRes) {\n            if (onProxyResponse(proxy, proxyReq, proxyRes, req, res)) {\n              try {\n                listener(proxyRes);\n              } catch (err) {\n                // Wrap in try-catch because an error could occur:\n                // \"RangeError: Invalid status code: 0\"\n                // https://github.com/Rob--W/cors-anywhere/issues/95\n                // https://github.com/nodejitsu/node-http-proxy/issues/1080\n                // Forward error (will ultimately emit the 'error' event on our proxy object):\n                // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L134\n                proxyReq.emit('error', err);\n              }\n            }\n          });\n        };\n\n        return req.pipe(proxyReq);\n      }\n    }\n  };\n  var proxyThroughUrl = req.corsAnywhereRequestState.getProxyForUrl(location.href);\n\n  if (proxyThroughUrl) {\n    proxyOptions.target = proxyThroughUrl;\n    proxyOptions.toProxy = true; // If a proxy URL was set, req.url must be an absolute URL. Then the request will not be sent\n    // directly to the proxied URL, but through another proxy.\n\n    req.url = location.href;\n  } // Start proxying the request\n\n\n  proxy.web(req, res, proxyOptions);\n}\n/**\n * This method modifies the response headers of the proxied response.\n * If a redirect is detected, the response is not sent to the client,\n * and a new request is initiated.\n *\n * client (req) -> CORS Anywhere -> (proxyReq) -> other server\n * client (res) <- CORS Anywhere <- (proxyRes) <- other server\n *\n * @param proxy {HttpProxy}\n * @param proxyReq {ClientRequest} The outgoing request to the other server.\n * @param proxyRes {ServerResponse} The response from the other server.\n * @param req {IncomingMessage} Incoming HTTP request, augmented with property corsAnywhereRequestState\n * @param req.corsAnywhereRequestState {object}\n * @param req.corsAnywhereRequestState.location {object} See parseURL\n * @param req.corsAnywhereRequestState.getProxyForUrl {function} See proxyRequest\n * @param req.corsAnywhereRequestState.proxyBaseUrl {string} Base URL of the CORS API endpoint\n * @param req.corsAnywhereRequestState.maxRedirects {number} Maximum number of redirects\n * @param req.corsAnywhereRequestState.redirectCount_ {number} Internally used to count redirects\n * @param res {ServerResponse} Outgoing response to the client that wanted to proxy the HTTP request.\n *\n * @returns {boolean} true if http-proxy should continue to pipe proxyRes to res.\n */\n\n\nfunction onProxyResponse(proxy, proxyReq, proxyRes, req, res) {\n  var requestState = req.corsAnywhereRequestState;\n  var statusCode = proxyRes.statusCode;\n\n  if (!requestState.redirectCount_) {\n    res.setHeader('x-request-url', requestState.location.href);\n  } // Handle redirects\n\n\n  if (statusCode === 301 || statusCode === 302 || statusCode === 303 || statusCode === 307 || statusCode === 308) {\n    var locationHeader = proxyRes.headers.location;\n\n    if (locationHeader) {\n      locationHeader = url.resolve(requestState.location.href, locationHeader);\n\n      if (statusCode === 301 || statusCode === 302 || statusCode === 303) {\n        // Exclude 307 & 308, because they are rare, and require preserving the method + request body\n        requestState.redirectCount_ = requestState.redirectCount_ + 1 || 1;\n\n        if (requestState.redirectCount_ <= requestState.maxRedirects) {\n          // Handle redirects within the server, because some clients (e.g. Android Stock Browser)\n          // cancel redirects.\n          // Set header for debugging purposes. Do not try to parse it!\n          res.setHeader('X-CORS-Redirect-' + requestState.redirectCount_, statusCode + ' ' + locationHeader);\n          req.method = 'GET';\n          req.headers['content-length'] = '0';\n          delete req.headers['content-type'];\n          requestState.location = parseURL(locationHeader); // Remove all listeners (=reset events to initial state)\n\n          req.removeAllListeners(); // Remove the error listener so that the ECONNRESET \"error\" that\n          // may occur after aborting a request does not propagate to res.\n          // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L134\n\n          proxyReq.removeAllListeners('error');\n          proxyReq.once('error', function catchAndIgnoreError() {});\n          proxyReq.abort(); // Initiate a new proxy request.\n\n          proxyRequest(req, res, proxy);\n          return false;\n        }\n      }\n\n      proxyRes.headers.location = requestState.proxyBaseUrl + '/' + locationHeader;\n    }\n  } // Strip cookies\n\n\n  delete proxyRes.headers['set-cookie'];\n  delete proxyRes.headers['set-cookie2'];\n  proxyRes.headers['x-final-url'] = requestState.location.href;\n  withCORS(proxyRes.headers, req);\n  return true;\n}\n/**\n * @param req_url {string} The requested URL (scheme is optional).\n * @return {object} URL parsed using url.parse\n */\n\n\nfunction parseURL(req_url) {\n  var match = req_url.match(/^(?:(https?:)?\\/\\/)?(([^\\/?]+?)(?::(\\d{0,5})(?=[\\/?]|$))?)([\\/?][\\S\\s]*|$)/i); //                              ^^^^^^^          ^^^^^^^^      ^^^^^^^                ^^^^^^^^^^^^\n  //                            1:protocol       3:hostname     4:port                 5:path + query string\n  //                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  //                                            2:host\n\n  if (!match) {\n    return null;\n  }\n\n  if (!match[1]) {\n    // Scheme is omitted.\n    if (req_url.lastIndexOf('//', 0) === -1) {\n      // \"//\" is omitted.\n      req_url = '//' + req_url;\n    }\n\n    req_url = (match[4] === '443' ? 'https:' : 'http:') + req_url;\n  }\n\n  return url.parse(req_url);\n} // Request handler factory\n\n\nfunction getHandler(options, proxy) {\n  var corsAnywhere = {\n    getProxyForUrl: getProxyForUrl,\n    // Function that specifies the proxy to use\n    maxRedirects: 5,\n    // Maximum number of redirects to be followed.\n    originBlacklist: [],\n    // Requests from these origins will be blocked.\n    originWhitelist: [],\n    // If non-empty, requests not from an origin in this list will be blocked.\n    checkRateLimit: null,\n    // Function that may enforce a rate-limit by returning a non-empty string.\n    redirectSameOrigin: false,\n    // Redirect the client to the requested URL for same-origin requests.\n    requireHeader: null,\n    // Require a header to be set?\n    removeHeaders: [],\n    // Strip these request headers.\n    setHeaders: {},\n    // Set these request headers.\n    corsMaxAge: 0,\n    // If set, an Access-Control-Max-Age header with this value (in seconds) will be added.\n    helpFile: __dirname + '/help.txt'\n  };\n  Object.keys(corsAnywhere).forEach(function (option) {\n    if (Object.prototype.hasOwnProperty.call(options, option)) {\n      corsAnywhere[option] = options[option];\n    }\n  }); // Convert corsAnywhere.requireHeader to an array of lowercase header names, or null.\n\n  if (corsAnywhere.requireHeader) {\n    if (typeof corsAnywhere.requireHeader === 'string') {\n      corsAnywhere.requireHeader = [corsAnywhere.requireHeader.toLowerCase()];\n    } else if (!Array.isArray(corsAnywhere.requireHeader) || corsAnywhere.requireHeader.length === 0) {\n      corsAnywhere.requireHeader = null;\n    } else {\n      corsAnywhere.requireHeader = corsAnywhere.requireHeader.map(function (headerName) {\n        return headerName.toLowerCase();\n      });\n    }\n  }\n\n  var hasRequiredHeaders = function (headers) {\n    return !corsAnywhere.requireHeader || corsAnywhere.requireHeader.some(function (headerName) {\n      return Object.hasOwnProperty.call(headers, headerName);\n    });\n  };\n\n  return function (req, res) {\n    req.corsAnywhereRequestState = {\n      getProxyForUrl: corsAnywhere.getProxyForUrl,\n      maxRedirects: corsAnywhere.maxRedirects,\n      corsMaxAge: corsAnywhere.corsMaxAge\n    };\n    var cors_headers = withCORS({}, req);\n\n    if (req.method === 'OPTIONS') {\n      // Pre-flight request. Reply successfully:\n      res.writeHead(200, cors_headers);\n      res.end();\n      return;\n    }\n\n    var location = parseURL(req.url.slice(1));\n\n    if (!location) {\n      // Invalid API call. Show how to correctly use the API\n      showUsage(corsAnywhere.helpFile, cors_headers, res);\n      return;\n    }\n\n    if (location.host === 'iscorsneeded') {\n      // Is CORS needed? This path is provided so that API consumers can test whether it's necessary\n      // to use CORS. The server's reply is always No, because if they can read it, then CORS headers\n      // are not necessary.\n      res.writeHead(200, {\n        'Content-Type': 'text/plain'\n      });\n      res.end('no');\n      return;\n    }\n\n    if (location.port > 65535) {\n      // Port is higher than 65535\n      res.writeHead(400, 'Invalid port', cors_headers);\n      res.end('Port number too large: ' + location.port);\n      return;\n    }\n\n    if (!/^\\/https?:/.test(req.url) && !isValidHostName(location.hostname)) {\n      // Don't even try to proxy invalid hosts (such as /favicon.ico, /robots.txt)\n      res.writeHead(404, 'Invalid host', cors_headers);\n      res.end('Invalid host: ' + location.hostname);\n      return;\n    }\n\n    if (!hasRequiredHeaders(req.headers)) {\n      res.writeHead(400, 'Header required', cors_headers);\n      res.end('Missing required request header. Must specify one of: ' + corsAnywhere.requireHeader);\n      return;\n    }\n\n    var origin = req.headers.origin || '';\n\n    if (corsAnywhere.originBlacklist.indexOf(origin) >= 0) {\n      res.writeHead(403, 'Forbidden', cors_headers);\n      res.end('The origin \"' + origin + '\" was blacklisted by the operator of this proxy.');\n      return;\n    }\n\n    if (corsAnywhere.originWhitelist.length && corsAnywhere.originWhitelist.indexOf(origin) === -1) {\n      res.writeHead(403, 'Forbidden', cors_headers);\n      res.end('The origin \"' + origin + '\" was not whitelisted by the operator of this proxy.');\n      return;\n    }\n\n    var rateLimitMessage = corsAnywhere.checkRateLimit && corsAnywhere.checkRateLimit(origin);\n\n    if (rateLimitMessage) {\n      res.writeHead(429, 'Too Many Requests', cors_headers);\n      res.end('The origin \"' + origin + '\" has sent too many requests.\\n' + rateLimitMessage);\n      return;\n    }\n\n    if (corsAnywhere.redirectSameOrigin && origin && location.href[origin.length] === '/' && location.href.lastIndexOf(origin, 0) === 0) {\n      // Send a permanent redirect to offload the server. Badly coded clients should not waste our resources.\n      cors_headers.vary = 'origin';\n      cors_headers['cache-control'] = 'private';\n      cors_headers.location = location.href;\n      res.writeHead(301, 'Please use a direct request', cors_headers);\n      res.end();\n      return;\n    }\n\n    var isRequestedOverHttps = req.connection.encrypted || /^\\s*https/.test(req.headers['x-forwarded-proto']);\n    var proxyBaseUrl = (isRequestedOverHttps ? 'https://' : 'http://') + req.headers.host;\n    corsAnywhere.removeHeaders.forEach(function (header) {\n      delete req.headers[header];\n    });\n    Object.keys(corsAnywhere.setHeaders).forEach(function (header) {\n      req.headers[header] = corsAnywhere.setHeaders[header];\n    });\n    req.corsAnywhereRequestState.location = location;\n    req.corsAnywhereRequestState.proxyBaseUrl = proxyBaseUrl;\n    proxyRequest(req, res, proxy);\n  };\n} // Create server with default and given values\n// Creator still needs to call .listen()\n\n\nexports.createServer = function createServer(options) {\n  options = options || {}; // Default options:\n\n  var httpProxyOptions = {\n    xfwd: true // Append X-Forwarded-* headers\n\n  }; // Allow user to override defaults and add own options\n\n  if (options.httpProxyOptions) {\n    Object.keys(options.httpProxyOptions).forEach(function (option) {\n      httpProxyOptions[option] = options.httpProxyOptions[option];\n    });\n  }\n\n  var proxy = httpProxy.createServer(httpProxyOptions);\n  var requestHandler = getHandler(options, proxy);\n  var server;\n\n  if (options.httpsOptions) {\n    server = require('https').createServer(options.httpsOptions, requestHandler);\n  } else {\n    server = require('http').createServer(requestHandler);\n  } // When the server fails, just show a 404 instead of Internal server error\n\n\n  proxy.on('error', function (err, req, res) {\n    if (res.headersSent) {\n      // This could happen when a protocol error occurs when an error occurs\n      // after the headers have been received (and forwarded). Do not write\n      // the headers because it would generate an error.\n      return;\n    } // When the error occurs after setting headers but before writing the response,\n    // then any previously set headers must be removed.\n\n\n    var headerNames = res.getHeaderNames ? res.getHeaderNames() : Object.keys(res._headers || {});\n    headerNames.forEach(function (name) {\n      res.removeHeader(name);\n    });\n    res.writeHead(404, {\n      'Access-Control-Allow-Origin': '*'\n    });\n    res.end('Not found because of proxy error: ' + err);\n  });\n  return server;\n};","map":{"version":3,"sources":["/home/zecheng3/workspace/narrative_dectection/narrative_detection_frontend/node_modules/cors-anywhere/lib/cors-anywhere.js"],"names":["httpProxy","require","net","url","regexp_tld","getProxyForUrl","help_text","showUsage","help_file","headers","response","isHtml","test","writeHead","end","readFile","err","data","console","error","isValidHostName","hostname","isIPv4","isIPv6","withCORS","request","corsMaxAge","corsAnywhereRequestState","Object","keys","join","proxyRequest","req","res","proxy","location","path","proxyOptions","changeOrigin","prependPath","target","host","buffer","pipe","proxyReq","proxyReqOn","on","eventName","listener","call","proxyRes","onProxyResponse","emit","proxyThroughUrl","href","toProxy","web","requestState","statusCode","redirectCount_","setHeader","locationHeader","resolve","maxRedirects","method","parseURL","removeAllListeners","once","catchAndIgnoreError","abort","proxyBaseUrl","req_url","match","lastIndexOf","parse","getHandler","options","corsAnywhere","originBlacklist","originWhitelist","checkRateLimit","redirectSameOrigin","requireHeader","removeHeaders","setHeaders","helpFile","__dirname","forEach","option","prototype","hasOwnProperty","toLowerCase","Array","isArray","length","map","headerName","hasRequiredHeaders","some","cors_headers","slice","port","origin","indexOf","rateLimitMessage","vary","isRequestedOverHttps","connection","encrypted","header","exports","createServer","httpProxyOptions","xfwd","requestHandler","server","httpsOptions","headersSent","headerNames","getHeaderNames","_headers","name","removeHeader"],"mappings":"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","sourcesContent":["// Â© 2013 - 2016 Rob Wu <rob@robwu.nl>\n// Released under the MIT license\n\n'use strict';\n\nvar httpProxy = require('http-proxy');\nvar net = require('net');\nvar url = require('url');\nvar regexp_tld = require('./regexp-top-level-domain');\nvar getProxyForUrl = require('proxy-from-env').getProxyForUrl;\n\nvar help_text = {};\nfunction showUsage(help_file, headers, response) {\n  var isHtml = /\\.html$/.test(help_file);\n  headers['content-type'] = isHtml ? 'text/html' : 'text/plain';\n  if (help_text[help_file] != null) {\n    response.writeHead(200, headers);\n    response.end(help_text[help_file]);\n  } else {\n    require('fs').readFile(help_file, 'utf8', function(err, data) {\n      if (err) {\n        console.error(err);\n        response.writeHead(500, headers);\n        response.end();\n      } else {\n        help_text[help_file] = data;\n        showUsage(help_file, headers, response); // Recursive call, but since data is a string, the recursion will end\n      }\n    });\n  }\n}\n\n/**\n * Check whether the specified hostname is valid.\n *\n * @param hostname {string} Host name (excluding port) of requested resource.\n * @return {boolean} Whether the requested resource can be accessed.\n */\nfunction isValidHostName(hostname) {\n  return !!(\n    regexp_tld.test(hostname) ||\n    net.isIPv4(hostname) ||\n    net.isIPv6(hostname)\n  );\n}\n\n/**\n * Adds CORS headers to the response headers.\n *\n * @param headers {object} Response headers\n * @param request {ServerRequest}\n */\nfunction withCORS(headers, request) {\n  headers['access-control-allow-origin'] = '*';\n  var corsMaxAge = request.corsAnywhereRequestState.corsMaxAge;\n  if (corsMaxAge) {\n    headers['access-control-max-age'] = corsMaxAge;\n  }\n  if (request.headers['access-control-request-method']) {\n    headers['access-control-allow-methods'] = request.headers['access-control-request-method'];\n    delete request.headers['access-control-request-method'];\n  }\n  if (request.headers['access-control-request-headers']) {\n    headers['access-control-allow-headers'] = request.headers['access-control-request-headers'];\n    delete request.headers['access-control-request-headers'];\n  }\n\n  headers['access-control-expose-headers'] = Object.keys(headers).join(',');\n\n  return headers;\n}\n\n/**\n * Performs the actual proxy request.\n *\n * @param req {ServerRequest} Incoming http request\n * @param res {ServerResponse} Outgoing (proxied) http request\n * @param proxy {HttpProxy}\n */\nfunction proxyRequest(req, res, proxy) {\n  var location = req.corsAnywhereRequestState.location;\n  req.url = location.path;\n\n  var proxyOptions = {\n    changeOrigin: false,\n    prependPath: false,\n    target: location,\n    headers: {\n      host: location.host,\n    },\n    // HACK: Get hold of the proxyReq object, because we need it later.\n    // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L144\n    buffer: {\n      pipe: function(proxyReq) {\n        var proxyReqOn = proxyReq.on;\n        // Intercepts the handler that connects proxyRes to res.\n        // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L146-L158\n        proxyReq.on = function(eventName, listener) {\n          if (eventName !== 'response') {\n            return proxyReqOn.call(this, eventName, listener);\n          }\n          return proxyReqOn.call(this, 'response', function(proxyRes) {\n            if (onProxyResponse(proxy, proxyReq, proxyRes, req, res)) {\n              try {\n                listener(proxyRes);\n              } catch (err) {\n                // Wrap in try-catch because an error could occur:\n                // \"RangeError: Invalid status code: 0\"\n                // https://github.com/Rob--W/cors-anywhere/issues/95\n                // https://github.com/nodejitsu/node-http-proxy/issues/1080\n\n                // Forward error (will ultimately emit the 'error' event on our proxy object):\n                // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L134\n                proxyReq.emit('error', err);\n              }\n            }\n          });\n        };\n        return req.pipe(proxyReq);\n      },\n    },\n  };\n\n  var proxyThroughUrl = req.corsAnywhereRequestState.getProxyForUrl(location.href);\n  if (proxyThroughUrl) {\n    proxyOptions.target = proxyThroughUrl;\n    proxyOptions.toProxy = true;\n    // If a proxy URL was set, req.url must be an absolute URL. Then the request will not be sent\n    // directly to the proxied URL, but through another proxy.\n    req.url = location.href;\n  }\n\n  // Start proxying the request\n  proxy.web(req, res, proxyOptions);\n}\n\n/**\n * This method modifies the response headers of the proxied response.\n * If a redirect is detected, the response is not sent to the client,\n * and a new request is initiated.\n *\n * client (req) -> CORS Anywhere -> (proxyReq) -> other server\n * client (res) <- CORS Anywhere <- (proxyRes) <- other server\n *\n * @param proxy {HttpProxy}\n * @param proxyReq {ClientRequest} The outgoing request to the other server.\n * @param proxyRes {ServerResponse} The response from the other server.\n * @param req {IncomingMessage} Incoming HTTP request, augmented with property corsAnywhereRequestState\n * @param req.corsAnywhereRequestState {object}\n * @param req.corsAnywhereRequestState.location {object} See parseURL\n * @param req.corsAnywhereRequestState.getProxyForUrl {function} See proxyRequest\n * @param req.corsAnywhereRequestState.proxyBaseUrl {string} Base URL of the CORS API endpoint\n * @param req.corsAnywhereRequestState.maxRedirects {number} Maximum number of redirects\n * @param req.corsAnywhereRequestState.redirectCount_ {number} Internally used to count redirects\n * @param res {ServerResponse} Outgoing response to the client that wanted to proxy the HTTP request.\n *\n * @returns {boolean} true if http-proxy should continue to pipe proxyRes to res.\n */\nfunction onProxyResponse(proxy, proxyReq, proxyRes, req, res) {\n  var requestState = req.corsAnywhereRequestState;\n\n  var statusCode = proxyRes.statusCode;\n\n  if (!requestState.redirectCount_) {\n    res.setHeader('x-request-url', requestState.location.href);\n  }\n  // Handle redirects\n  if (statusCode === 301 || statusCode === 302 || statusCode === 303 || statusCode === 307 || statusCode === 308) {\n    var locationHeader = proxyRes.headers.location;\n    if (locationHeader) {\n      locationHeader = url.resolve(requestState.location.href, locationHeader);\n\n      if (statusCode === 301 || statusCode === 302 || statusCode === 303) {\n        // Exclude 307 & 308, because they are rare, and require preserving the method + request body\n        requestState.redirectCount_ = requestState.redirectCount_ + 1 || 1;\n        if (requestState.redirectCount_ <= requestState.maxRedirects) {\n          // Handle redirects within the server, because some clients (e.g. Android Stock Browser)\n          // cancel redirects.\n          // Set header for debugging purposes. Do not try to parse it!\n          res.setHeader('X-CORS-Redirect-' + requestState.redirectCount_, statusCode + ' ' + locationHeader);\n\n          req.method = 'GET';\n          req.headers['content-length'] = '0';\n          delete req.headers['content-type'];\n          requestState.location = parseURL(locationHeader);\n\n          // Remove all listeners (=reset events to initial state)\n          req.removeAllListeners();\n\n          // Remove the error listener so that the ECONNRESET \"error\" that\n          // may occur after aborting a request does not propagate to res.\n          // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L134\n          proxyReq.removeAllListeners('error');\n          proxyReq.once('error', function catchAndIgnoreError() {});\n          proxyReq.abort();\n\n          // Initiate a new proxy request.\n          proxyRequest(req, res, proxy);\n          return false;\n        }\n      }\n      proxyRes.headers.location = requestState.proxyBaseUrl + '/' + locationHeader;\n    }\n  }\n\n  // Strip cookies\n  delete proxyRes.headers['set-cookie'];\n  delete proxyRes.headers['set-cookie2'];\n\n  proxyRes.headers['x-final-url'] = requestState.location.href;\n  withCORS(proxyRes.headers, req);\n  return true;\n}\n\n\n/**\n * @param req_url {string} The requested URL (scheme is optional).\n * @return {object} URL parsed using url.parse\n */\nfunction parseURL(req_url) {\n  var match = req_url.match(/^(?:(https?:)?\\/\\/)?(([^\\/?]+?)(?::(\\d{0,5})(?=[\\/?]|$))?)([\\/?][\\S\\s]*|$)/i);\n  //                              ^^^^^^^          ^^^^^^^^      ^^^^^^^                ^^^^^^^^^^^^\n  //                            1:protocol       3:hostname     4:port                 5:path + query string\n  //                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  //                                            2:host\n  if (!match) {\n    return null;\n  }\n  if (!match[1]) {\n    // Scheme is omitted.\n    if (req_url.lastIndexOf('//', 0) === -1) {\n      // \"//\" is omitted.\n      req_url = '//' + req_url;\n    }\n    req_url = (match[4] === '443' ? 'https:' : 'http:') + req_url;\n  }\n  return url.parse(req_url);\n}\n\n// Request handler factory\nfunction getHandler(options, proxy) {\n  var corsAnywhere = {\n    getProxyForUrl: getProxyForUrl, // Function that specifies the proxy to use\n    maxRedirects: 5,                // Maximum number of redirects to be followed.\n    originBlacklist: [],            // Requests from these origins will be blocked.\n    originWhitelist: [],            // If non-empty, requests not from an origin in this list will be blocked.\n    checkRateLimit: null,           // Function that may enforce a rate-limit by returning a non-empty string.\n    redirectSameOrigin: false,      // Redirect the client to the requested URL for same-origin requests.\n    requireHeader: null,            // Require a header to be set?\n    removeHeaders: [],              // Strip these request headers.\n    setHeaders: {},                 // Set these request headers.\n    corsMaxAge: 0,                  // If set, an Access-Control-Max-Age header with this value (in seconds) will be added.\n    helpFile: __dirname + '/help.txt',\n  };\n\n  Object.keys(corsAnywhere).forEach(function(option) {\n    if (Object.prototype.hasOwnProperty.call(options, option)) {\n      corsAnywhere[option] = options[option];\n    }\n  });\n\n  // Convert corsAnywhere.requireHeader to an array of lowercase header names, or null.\n  if (corsAnywhere.requireHeader) {\n    if (typeof corsAnywhere.requireHeader === 'string') {\n      corsAnywhere.requireHeader = [corsAnywhere.requireHeader.toLowerCase()];\n    } else if (!Array.isArray(corsAnywhere.requireHeader) || corsAnywhere.requireHeader.length === 0) {\n      corsAnywhere.requireHeader = null;\n    } else {\n      corsAnywhere.requireHeader = corsAnywhere.requireHeader.map(function(headerName) {\n        return headerName.toLowerCase();\n      });\n    }\n  }\n  var hasRequiredHeaders = function(headers) {\n    return !corsAnywhere.requireHeader || corsAnywhere.requireHeader.some(function(headerName) {\n      return Object.hasOwnProperty.call(headers, headerName);\n    });\n  };\n\n  return function(req, res) {\n    req.corsAnywhereRequestState = {\n      getProxyForUrl: corsAnywhere.getProxyForUrl,\n      maxRedirects: corsAnywhere.maxRedirects,\n      corsMaxAge: corsAnywhere.corsMaxAge,\n    };\n\n    var cors_headers = withCORS({}, req);\n    if (req.method === 'OPTIONS') {\n      // Pre-flight request. Reply successfully:\n      res.writeHead(200, cors_headers);\n      res.end();\n      return;\n    }\n\n    var location = parseURL(req.url.slice(1));\n\n    if (!location) {\n      // Invalid API call. Show how to correctly use the API\n      showUsage(corsAnywhere.helpFile, cors_headers, res);\n      return;\n    }\n\n    if (location.host === 'iscorsneeded') {\n      // Is CORS needed? This path is provided so that API consumers can test whether it's necessary\n      // to use CORS. The server's reply is always No, because if they can read it, then CORS headers\n      // are not necessary.\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('no');\n      return;\n    }\n\n    if (location.port > 65535) {\n      // Port is higher than 65535\n      res.writeHead(400, 'Invalid port', cors_headers);\n      res.end('Port number too large: ' + location.port);\n      return;\n    }\n\n    if (!/^\\/https?:/.test(req.url) && !isValidHostName(location.hostname)) {\n      // Don't even try to proxy invalid hosts (such as /favicon.ico, /robots.txt)\n      res.writeHead(404, 'Invalid host', cors_headers);\n      res.end('Invalid host: ' + location.hostname);\n      return;\n    }\n\n    if (!hasRequiredHeaders(req.headers)) {\n      res.writeHead(400, 'Header required', cors_headers);\n      res.end('Missing required request header. Must specify one of: ' + corsAnywhere.requireHeader);\n      return;\n    }\n\n    var origin = req.headers.origin || '';\n    if (corsAnywhere.originBlacklist.indexOf(origin) >= 0) {\n      res.writeHead(403, 'Forbidden', cors_headers);\n      res.end('The origin \"' + origin + '\" was blacklisted by the operator of this proxy.');\n      return;\n    }\n\n    if (corsAnywhere.originWhitelist.length && corsAnywhere.originWhitelist.indexOf(origin) === -1) {\n      res.writeHead(403, 'Forbidden', cors_headers);\n      res.end('The origin \"' + origin + '\" was not whitelisted by the operator of this proxy.');\n      return;\n    }\n\n    var rateLimitMessage = corsAnywhere.checkRateLimit && corsAnywhere.checkRateLimit(origin);\n    if (rateLimitMessage) {\n      res.writeHead(429, 'Too Many Requests', cors_headers);\n      res.end('The origin \"' + origin + '\" has sent too many requests.\\n' + rateLimitMessage);\n      return;\n    }\n\n    if (corsAnywhere.redirectSameOrigin && origin && location.href[origin.length] === '/' &&\n        location.href.lastIndexOf(origin, 0) === 0) {\n      // Send a permanent redirect to offload the server. Badly coded clients should not waste our resources.\n      cors_headers.vary = 'origin';\n      cors_headers['cache-control'] = 'private';\n      cors_headers.location = location.href;\n      res.writeHead(301, 'Please use a direct request', cors_headers);\n      res.end();\n      return;\n    }\n\n    var isRequestedOverHttps = req.connection.encrypted || /^\\s*https/.test(req.headers['x-forwarded-proto']);\n    var proxyBaseUrl = (isRequestedOverHttps ? 'https://' : 'http://') + req.headers.host;\n\n    corsAnywhere.removeHeaders.forEach(function(header) {\n      delete req.headers[header];\n    });\n\n    Object.keys(corsAnywhere.setHeaders).forEach(function(header) {\n      req.headers[header] = corsAnywhere.setHeaders[header];\n    });\n\n    req.corsAnywhereRequestState.location = location;\n    req.corsAnywhereRequestState.proxyBaseUrl = proxyBaseUrl;\n\n    proxyRequest(req, res, proxy);\n  };\n}\n\n// Create server with default and given values\n// Creator still needs to call .listen()\nexports.createServer = function createServer(options) {\n  options = options || {};\n\n  // Default options:\n  var httpProxyOptions = {\n    xfwd: true,            // Append X-Forwarded-* headers\n  };\n  // Allow user to override defaults and add own options\n  if (options.httpProxyOptions) {\n    Object.keys(options.httpProxyOptions).forEach(function(option) {\n      httpProxyOptions[option] = options.httpProxyOptions[option];\n    });\n  }\n\n  var proxy = httpProxy.createServer(httpProxyOptions);\n  var requestHandler = getHandler(options, proxy);\n  var server;\n  if (options.httpsOptions) {\n    server = require('https').createServer(options.httpsOptions, requestHandler);\n  } else {\n    server = require('http').createServer(requestHandler);\n  }\n\n  // When the server fails, just show a 404 instead of Internal server error\n  proxy.on('error', function(err, req, res) {\n    if (res.headersSent) {\n      // This could happen when a protocol error occurs when an error occurs\n      // after the headers have been received (and forwarded). Do not write\n      // the headers because it would generate an error.\n      return;\n    }\n\n    // When the error occurs after setting headers but before writing the response,\n    // then any previously set headers must be removed.\n    var headerNames = res.getHeaderNames ? res.getHeaderNames() : Object.keys(res._headers || {});\n    headerNames.forEach(function(name) {\n      res.removeHeader(name);\n    });\n\n    res.writeHead(404, {'Access-Control-Allow-Origin': '*'});\n    res.end('Not found because of proxy error: ' + err);\n  });\n\n  return server;\n};\n"]},"metadata":{},"sourceType":"script"}