{"ast":null,"code":"var _jsxFileName = \"/home/zecheng3/workspace/narrative_dectection/narrative_detection_frontend/src/App.js\";\nimport React from \"react\";\nimport Sidebar from \"react-sidebar\";\nimport { Container, Row, Col } from 'reactstrap';\nimport { ResponsiveLine } from '@nivo/line';\nimport { ResponsiveBar } from '@nivo/bar';\nimport { ResponsivePieCanvas } from '@nivo/pie';\nimport { pie_data, line_data, line_pos_neg, activity_pie_data } from \"./data\";\nimport './App.css';\nimport GaugeChart from 'react-gauge-chart';\nimport Thermometer from 'react-thermometer-component';\nimport Slider, { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nvar API = 'http://127.0.0.1:8000/polar_result/';\nvar date = 'Feb_01_2020';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeTitle = title => {\n      this.setState({\n        currentTopic: title,\n        sidebarOpen: false\n      });\n    };\n\n    this.changeColor = number => {\n      this.setState({\n        selected: number\n      });\n    };\n\n    this.myColor = position => {\n      if (this.state.selected === position) {\n        return \"grey\";\n      }\n\n      return \"\";\n    };\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      sidebarOpen: true,\n      selected: 0,\n      currentTopic: \"ACFT\",\n      positive: 0,\n      negative: 0,\n      neutral: 0,\n      total: 0,\n      threshold: 100,\n      date: ''\n    };\n    this.onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\n    this.sliderHandler = this.sliderHandler.bind(this);\n    this.sliderTxtHandler = this.sliderTxtHandler.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(API + this.state.currentTopic + '/' + date).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        positive: result.positive,\n        negative: result.negative,\n        neutral: result.neutral,\n        total: result.positive + result.negative + result.neutral\n      });\n      console.log(result);\n    });\n  }\n\n  sliderTxtHandler(e) {}\n\n  sliderHandler(e) {\n    console.log(e);\n    date = 'Feb_0' + e.toString() + '_2020';\n    this.componentDidMount();\n  }\n\n  onSetSidebarOpen(open) {\n    this.setState({\n      sidebarOpen: open\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded\n    } = this.state;\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"div\", {\n        className: \"display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, this.state.currentTopic), React.createElement(\"div\", {\n        className: \"date-slider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Slider, {\n        className: \"slider\",\n        ariaLabelForHandle: \"hello\",\n        ariaLabelledByForHandle: \"hello\",\n        ariaValueTextFormatterForHandle: this.sliderTxtHandler,\n        onAfterChange: this.sliderHandler,\n        max: 15,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"charts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(GaugeChart, {\n        id: \"gauge-chart1\",\n        nrOfLevels: 2,\n        animate: false,\n        percent: (2 * this.state.positive + 1 * this.state.neutral) / (2 * this.state.total),\n        hideText: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(GaugeChart, {\n        id: \"gauge-chart2\",\n        nrOfLevels: 1,\n        animate: false,\n        percent: Math.min(this.state.total / this.state.threshold, 1),\n        hideText: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"temperature\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Thermometer, {\n        theme: \"light\",\n        value: Math.min(this.state.total, 100).toString(),\n        max: \"100\",\n        size: \"normal\",\n        height: \"150\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }))));\n    }\n  }\n\n} // function linechart(data) {\n//     return (\n//         <ResponsiveLine\n//             data={data}\n//             curve=\"natural\"\n//             // width={1000}\n//             // height={500}\n//             axisTop={null}\n//             axisRight={null}\n//             axisBottom={{\n//                 orient: 'bottom',\n//                 tickSize: 10,\n//                 tickPadding: 5,\n//                 tickRotation: 0,\n//                 legend: 'Date',\n//                 legendOffset: 36,\n//                 legendPosition: 'middle',\n//                 format: \"%b %d\"\n//             }}\n//             axisLeft={{\n//                 orient: 'left',\n//                 tickSize: 10,\n//                 tickPadding: 5,\n//                 tickRotation: 0,\n//                 legend: 'activity count',\n//                 legendOffset: -40,\n//                 legendPosition: 'middle'\n//             }}\n//             margin={{\n//                 top: 50,\n//                 right: 50,\n//                 bottom: 50,\n//                 left: 50\n//             }}\n//             yScale={{\n//                 type: \"linear\",\n//                 stacked: false,\n//                 min: 0,\n//                 max: \"auto\"\n//             }}\n//             xScale={{\n//                 type: \"time\",\n//                 precision: \"day\",\n//                 format: \"native\"\n//             }}\n//             legends={[\n//                 {\n//                     anchor: 'bottom-right',\n//                     direction: 'column',\n//                     justify: false,\n//                     translateX: 0,\n//                     translateY: 0,\n//                     itemsSpacing: 0,\n//                     itemDirection: 'left-to-right',\n//                     itemWidth: 80,\n//                     itemHeight: 20,\n//                     itemOpacity: 0.75,\n//                     symbolSize: 12,\n//                     symbolShape: 'circle',\n//                     symbolBorderColor: 'rgba(0, 0, 0, .5)',\n//                     effects: [\n//                         {\n//                             on: 'hover',\n//                             style: {\n//                                 itemBackground: 'rgba(0, 0, 0, .03)',\n//                                 itemOpacity: 1\n//                             }\n//                         }\n//                     ]\n//                 }\n//             ]}\n//         />\n//     );\n// }\n// function piechart(data) {\n//     return (\n//         <ResponsivePieCanvas\n//             data={data}\n//             margin={{ top: 40, right: 200, bottom: 40, left: 80 }}\n//             pixelRatio={2}\n//             innerRadius={0.5}\n//             padAngle={0.7}\n//             cornerRadius={3}\n//             colors={{ scheme: 'paired' }}\n//             width={800}\n//             height={800}\n//             borderColor={{ from: 'color', modifiers: [ [ 'darker', 0.6 ] ] }}\n//             radialLabelsSkipAngle={10}\n//             radialLabelsTextXOffset={6}\n//             radialLabelsTextColor=\"#333333\"\n//             radialLabelsLinkOffset={0}\n//             radialLabelsLinkDiagonalLength={16}\n//             radialLabelsLinkHorizontalLength={24}\n//             radialLabelsLinkStrokeWidth={1}\n//             radialLabelsLinkColor={{ from: 'color' }}\n//             slicesLabelsSkipAngle={10}\n//             slicesLabelsTextColor=\"#333333\"\n//             animate={true}\n//             motionStiffness={90}\n//             motionDamping={15}\n//             legends={[\n//                 {\n//                     anchor: 'right',\n//                     direction: 'column',\n//                     translateX: 140,\n//                     itemWidth: 60,\n//                     itemHeight: 14,\n//                     itemsSpacing: 2,\n//                     symbolSize: 14,\n//                     symbolShape: 'circle'\n//                 }\n//             ]}\n//         />\n//     )\n// }\n// // const styles = StyleSheet.create({\n// //\n// // });\n\n\nexport default App;","map":{"version":3,"sources":["/home/zecheng3/workspace/narrative_dectection/narrative_detection_frontend/src/App.js"],"names":["React","Sidebar","Container","Row","Col","ResponsiveLine","ResponsiveBar","ResponsivePieCanvas","pie_data","line_data","line_pos_neg","activity_pie_data","GaugeChart","Thermometer","Slider","Range","API","date","App","Component","constructor","props","changeTitle","title","setState","currentTopic","sidebarOpen","changeColor","number","selected","myColor","position","state","error","isLoaded","positive","negative","neutral","total","threshold","onSetSidebarOpen","bind","sliderHandler","sliderTxtHandler","componentDidMount","fetch","then","res","json","result","console","log","e","toString","open","render","message","Math","min"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Sidebar from \"react-sidebar\";\nimport { Container, Row, Col } from 'reactstrap';\nimport { ResponsiveLine } from '@nivo/line'\nimport { ResponsiveBar } from '@nivo/bar'\nimport { ResponsivePieCanvas } from '@nivo/pie'\nimport {pie_data, line_data, line_pos_neg,activity_pie_data} from \"./data\";\nimport './App.css'\nimport GaugeChart from 'react-gauge-chart'\nimport Thermometer from 'react-thermometer-component'\nimport Slider, { Range } from 'rc-slider'; \nimport 'rc-slider/assets/index.css';\n\n\nvar API = 'http://127.0.0.1:8000/polar_result/';\nvar date = 'Feb_01_2020';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    \terror: null,\n    \tisLoaded: false,\n    \tsidebarOpen: true,\n        selected: 0,\n    \tcurrentTopic:\"ACFT\",\n    \tpositive: 0,\n    \tnegative: 0,\n    \tneutral: 0,\n    \ttotal: 0,\n    \tthreshold: 100,\n    \tdate: ''\n    };\n    this.onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\n    this.sliderHandler = this.sliderHandler.bind(this);\n    this.sliderTxtHandler = this.sliderTxtHandler.bind(this);\n  }\n\n  componentDidMount() {\n  \tfetch(API + this.state.currentTopic + '/' + date)\n  \t.then(res => res.json())\n  \t.then(\n  \t\t(result) => {\n  \t\t\tthis.setState({\n  \t\t\t\tisLoaded: true,\n  \t\t\t\tpositive: result.positive,\n  \t\t\t\tnegative: result.negative,\n  \t\t\t\tneutral: result.neutral,\n  \t\t\t\ttotal: result.positive + result.negative + result.neutral,\n  \t\t\t})\n  \t\t\tconsole.log(result);\n  \t\t}\n\n  \t\t);\n  }\n\n  sliderTxtHandler(e) {\n\n  }\n\n  sliderHandler(e) {\n  \tconsole.log(e);\n  \tdate = 'Feb_0' + e.toString() + '_2020';\n  \tthis.componentDidMount();\n  }\n\n  onSetSidebarOpen(open) {\n    this.setState({ sidebarOpen: open });\n  }\n\n    changeTitle = (title) => {\n        this.setState(\n            { currentTopic: title,\n                sidebarOpen: false }\n            );\n    }\n\n    changeColor = (number) => {\n        this.setState(\n            { selected: number}\n        );\n    }\n\n    myColor =(position) => {\n        if (this.state.selected === position) {\n            return \"grey\";\n        }\n        return \"\";\n    }\n\n  render() {\n  \tconst { error, isLoaded} = this.state;\n  \t if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n\t    return (\n\t        \t<div className='display'>\n\t            <h1>\n\t                {this.state.currentTopic}\n\t            </h1>\n\t            <div className='date-slider'>\n\t            \t<Slider className='slider'\n\t            \tariaLabelForHandle='hello'\n\t            \tariaLabelledByForHandle='hello'\n\t            \tariaValueTextFormatterForHandle={this.sliderTxtHandler}\n\t            \tonAfterChange={this.sliderHandler}\n\t            \tmax={15}/>\n\t            </div>\n\t            <div className='charts'>\n\t\t            <GaugeChart id=\"gauge-chart1\" \n\t\t              nrOfLevels={2} \n\t\t              animate={false}\n\t\t              percent={(2 * this.state.positive + 1 * this.state.neutral)/(2 * this.state.total)}\n\t\t           \t  hideText={true}\n\t\t            />\n\t\t            <GaugeChart id=\"gauge-chart2\" \n\t\t              nrOfLevels={1} \n\t\t              animate={false}\n\t\t              percent={Math.min(this.state.total/this.state.threshold, 1)}\n\t\t              hideText={true}\n\t\t            />\n\t\t            <div className='temperature'>\n\t\t\t            <Thermometer\n\t\t\t\t\t\t  theme=\"light\"\n\t\t\t\t\t\t  value={Math.min(this.state.total, 100).toString()}\n\t\t\t\t\t\t  max=\"100\"\n\t\t\t\t\t\t  size=\"normal\"\n\t\t\t\t\t\t  height=\"150\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t            </div>\n\n\t        </div>\n\t    );\n\t  }\n\t}\n}\n\n// function linechart(data) {\n//     return (\n//         <ResponsiveLine\n//             data={data}\n//             curve=\"natural\"\n//             // width={1000}\n//             // height={500}\n//             axisTop={null}\n//             axisRight={null}\n//             axisBottom={{\n//                 orient: 'bottom',\n//                 tickSize: 10,\n//                 tickPadding: 5,\n//                 tickRotation: 0,\n//                 legend: 'Date',\n//                 legendOffset: 36,\n//                 legendPosition: 'middle',\n//                 format: \"%b %d\"\n//             }}\n//             axisLeft={{\n//                 orient: 'left',\n//                 tickSize: 10,\n//                 tickPadding: 5,\n//                 tickRotation: 0,\n//                 legend: 'activity count',\n//                 legendOffset: -40,\n//                 legendPosition: 'middle'\n//             }}\n//             margin={{\n//                 top: 50,\n//                 right: 50,\n//                 bottom: 50,\n//                 left: 50\n//             }}\n//             yScale={{\n//                 type: \"linear\",\n//                 stacked: false,\n//                 min: 0,\n//                 max: \"auto\"\n//             }}\n//             xScale={{\n//                 type: \"time\",\n//                 precision: \"day\",\n//                 format: \"native\"\n//             }}\n//             legends={[\n//                 {\n//                     anchor: 'bottom-right',\n//                     direction: 'column',\n//                     justify: false,\n//                     translateX: 0,\n//                     translateY: 0,\n//                     itemsSpacing: 0,\n//                     itemDirection: 'left-to-right',\n//                     itemWidth: 80,\n//                     itemHeight: 20,\n//                     itemOpacity: 0.75,\n//                     symbolSize: 12,\n//                     symbolShape: 'circle',\n//                     symbolBorderColor: 'rgba(0, 0, 0, .5)',\n//                     effects: [\n//                         {\n//                             on: 'hover',\n//                             style: {\n//                                 itemBackground: 'rgba(0, 0, 0, .03)',\n//                                 itemOpacity: 1\n//                             }\n//                         }\n//                     ]\n//                 }\n//             ]}\n//         />\n//     );\n// }\n\n// function piechart(data) {\n//     return (\n//         <ResponsivePieCanvas\n//             data={data}\n//             margin={{ top: 40, right: 200, bottom: 40, left: 80 }}\n//             pixelRatio={2}\n//             innerRadius={0.5}\n//             padAngle={0.7}\n//             cornerRadius={3}\n//             colors={{ scheme: 'paired' }}\n//             width={800}\n//             height={800}\n//             borderColor={{ from: 'color', modifiers: [ [ 'darker', 0.6 ] ] }}\n//             radialLabelsSkipAngle={10}\n//             radialLabelsTextXOffset={6}\n//             radialLabelsTextColor=\"#333333\"\n//             radialLabelsLinkOffset={0}\n//             radialLabelsLinkDiagonalLength={16}\n//             radialLabelsLinkHorizontalLength={24}\n//             radialLabelsLinkStrokeWidth={1}\n//             radialLabelsLinkColor={{ from: 'color' }}\n//             slicesLabelsSkipAngle={10}\n//             slicesLabelsTextColor=\"#333333\"\n//             animate={true}\n//             motionStiffness={90}\n//             motionDamping={15}\n//             legends={[\n//                 {\n//                     anchor: 'right',\n//                     direction: 'column',\n//                     translateX: 140,\n//                     itemWidth: 60,\n//                     itemHeight: 14,\n//                     itemsSpacing: 2,\n//                     symbolSize: 14,\n//                     symbolShape: 'circle'\n//                 }\n//             ]}\n//         />\n//     )\n// }\n// // const styles = StyleSheet.create({\n// //\n// // });\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}