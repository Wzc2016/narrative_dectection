{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nrequire('./Thermometer.css');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Thermometer = function (_Component) {\n  _inherits(Thermometer, _Component);\n\n  function Thermometer() {\n    _classCallCheck(this, Thermometer);\n\n    return _possibleConstructorReturn(this, (Thermometer.__proto__ || Object.getPrototypeOf(Thermometer)).apply(this, arguments));\n  }\n\n  _createClass(Thermometer, [{\n    key: 'render',\n    value: function render() {\n      this.options = this._generateOptions();\n      var theme = 'thermometer--theme-' + this.options.theme();\n      var size = 'thermometer--' + this.options.size();\n      var height = {\n        height: this.options.height + 'px'\n      };\n      var heightPercent = {\n        height: this.options.percent() + '%'\n      };\n      var heightBgColor = {\n        height: 'calc(' + this.options.height + 'px - 57px)'\n      };\n      var valstr = this.options.valstr();\n\n      this._createIntervals();\n\n      var stepIntervals = this._createIntervalsUI(this.options.intervals);\n\n      return _react2.default.createElement('div', {\n        style: height,\n        className: 'thermometer ' + size + ' ' + theme\n      }, _react2.default.createElement('div', {\n        className: 'thermometer__draw-a'\n      }), _react2.default.createElement('div', {\n        className: 'thermometer__draw-b'\n      }), _react2.default.createElement('div', {\n        className: 'thermometer__meter'\n      }, _react2.default.createElement('ul', {\n        className: 'thermometer__statistics'\n      }, stepIntervals), _react2.default.createElement('div', {\n        style: heightPercent,\n        className: 'thermometer__mercury'\n      }, _react2.default.createElement('div', {\n        className: 'thermometer__percent-current'\n      }, valstr), _react2.default.createElement('div', {\n        className: 'thermometer__mask'\n      }, _react2.default.createElement('div', {\n        className: 'thermometer__bg-color',\n        style: heightBgColor\n      })))));\n    }\n  }, {\n    key: '_generateOptions',\n    value: function _generateOptions() {\n      var _this2 = this;\n\n      return {\n        theme: function theme() {\n          return _this2.props.theme === 'light' || _this2.props.theme === 'dark' ? _this2.props.theme : 'light';\n        },\n        value: this.props.value || 0,\n        //default 0\n        max: this.props.max || 100,\n        //default 100\n        steps: this.props.steps,\n        format: this.props.format || '',\n        size: function size() {\n          return _this2.props.size === 'small' || _this2.props.size === 'normal' || _this2.props.size === 'large' ? _this2.props.size : 'normal';\n        },\n        height: this.props.height || 200,\n        //default 200\n        valstr: function valstr() {\n          return _this2.options.value + _this2.options.format;\n        },\n        percent: function percent() {\n          return _this2.options.value / _this2.options.max * 100;\n        },\n        intervals: []\n      };\n    }\n  }, {\n    key: '_createIntervals',\n    value: function _createIntervals() {\n      if (this.options.steps) {\n        for (var step = 0; step <= this.options.steps; step++) {\n          var val = (this.options.max / this.options.steps * step).toFixed(2);\n          var percent = val / this.options.max * 100;\n          var interval = {\n            percent: percent,\n            label: val + this.options.format\n          };\n          this.options.intervals.push(interval);\n        }\n      }\n    }\n  }, {\n    key: '_createIntervalsUI',\n    value: function _createIntervalsUI(intervals) {\n      return intervals.map(function (step, i) {\n        return _react2.default.createElement('li', {\n          key: i,\n          style: {\n            bottom: 'calc(' + step.percent + '% - 1px)'\n          }\n        }, step.label);\n      });\n    }\n  }]);\n\n  return Thermometer;\n}(_react.Component);\n\nexports.default = Thermometer;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../src/index.js"],"names":["Thermometer","theme","size","height","heightPercent","heightBgColor","valstr","stepIntervals","value","max","steps","format","percent","intervals","step","val","interval","label","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport './Thermometer.css'\r\n\r\nclass Thermometer extends Component {\r\n  render() {\r\n    this.options = this._generateOptions()\r\n    const theme = `thermometer--theme-${this.options.theme()}`\r\n    const size = `thermometer--${this.options.size()}`\r\n    const height = { height: `${this.options.height}px` }\r\n    const heightPercent = { height: `${this.options.percent()}%` }\r\n    const heightBgColor = { height: `calc(${this.options.height}px - 57px)` }\r\n    const valstr = this.options.valstr()\r\n    this._createIntervals()\r\n    const stepIntervals = this._createIntervalsUI(this.options.intervals)\r\n\r\n    return (\r\n      <div style={height} className={`thermometer ${size} ${theme}`}>\r\n        <div className=\"thermometer__draw-a\"></div>\r\n        <div className=\"thermometer__draw-b\"></div>\r\n        <div className=\"thermometer__meter\">\r\n          <ul className=\"thermometer__statistics\">{stepIntervals}</ul>\r\n          <div style={heightPercent} className=\"thermometer__mercury\">\r\n            <div className=\"thermometer__percent-current\">{valstr}</div>\r\n            <div className=\"thermometer__mask\">\r\n              <div className=\"thermometer__bg-color\" style={heightBgColor}></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  _generateOptions() {\r\n    return {\r\n      theme: () => this.props.theme === 'light' || this.props.theme === 'dark' ? this.props.theme : 'light',\r\n      value: this.props.value || 0, //default 0\r\n      max: this.props.max || 100, //default 100\r\n      steps: this.props.steps,\r\n      format: this.props.format || '',\r\n      size: () => this.props.size === 'small' || this.props.size === 'normal' || this.props.size === 'large' ? this.props.size : 'normal',\r\n      height: this.props.height || 200, //default 200\r\n      valstr: () => this.options.value + this.options.format,\r\n      percent: () => this.options.value / this.options.max * 100,\r\n      intervals: []\r\n    }\r\n  }\r\n\r\n  _createIntervals() {\r\n    if (this.options.steps) {\r\n      for (let step = 0; step <= this.options.steps; step++) {\r\n        let val = ((this.options.max / this.options.steps) * step).toFixed(2)\r\n        let percent = (val / this.options.max) * 100\r\n        let interval = { percent: percent, label: val + this.options.format }\r\n        this.options.intervals.push(interval)\r\n      }\r\n    }\r\n  }\r\n\r\n  _createIntervalsUI(intervals) {\r\n    return intervals.map((step, i) => {\r\n      return (\r\n        <li key={i} style={{ bottom: `calc(${step.percent}% - 1px)` }}>\r\n          {step.label}\r\n        </li>\r\n      )\r\n    })\r\n  }\r\n\r\n}\r\n\r\nexport default Thermometer\n"]},"metadata":{},"sourceType":"script"}